[{"C:\\Users\\dyogo\\Desenvolvimento && Design\\Desenvolvimento\\GitHub\\X-O\\src\\index.js":"1"},{"size":3281,"mtime":1609960703184,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"6"},"y8z6d5","C:\\Users\\dyogo\\Desenvolvimento && Design\\Desenvolvimento\\GitHub\\X-O\\src\\index.js",["7"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n// Square\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\n\r\n\r\n// Board\r\nclass Board extends React.Component {\r\n  handleClick(i) {\r\n    const history = this.state.history;\r\n    const current = history.[history.length - 1];\r\n    const squares = this.state.squares.slice();\r\n\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n    this.setState({ \r\n      history: history.concat([{\r\n        squares: squares,\r\n      }]),\r\n\r\n      xIsNext: !this.state.xIsNext,  \r\n    });\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square \r\n        value={this.props.squares[i]} \r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n// Game\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      \r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[history.length - 1];\r\n    const winner = calculateWinner(current.squares);\r\n\r\n    let status;\r\n\r\n    if (winner) {\r\n      status = 'Vencedor: ' + winner;\r\n    } else {\r\n      status = 'Próximo jogador: ' + (this.state.xIsNext ? 'X' : 'O');\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            squares = {current.squares}\r\n            onClick = {(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <ol>{/* TODO */}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n// calcula o vencedor.\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <Game />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n#############################################\r\n##############  Anotações ###################\r\n#############################################\r\n\r\n\r\n\r\n- .slice() = cria uma cópia do array de quadrados.\r\n\r\n- history: Representa todos os estados do tabuleiro, da primeira à última jogada,\r\n\r\n- concat() não modifica o array original.\r\n\r\n*/",{"ruleId":"8","severity":1,"message":"9","line":21,"column":11,"nodeType":"10","messageId":"11","endLine":21,"endColumn":18},"no-unused-vars","'current' is assigned a value but never used.","Identifier","unusedVar"]